// Code generated by protoc-gen-go. DO NOT EDIT.
// source: baap_stream.proto

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	baap_stream.proto

It has these top-level messages:
	StreamFrame
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamFrame struct {
	Meta map[string][]byte `protobuf:"bytes,1,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body []byte            `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *StreamFrame) Reset()                    { *m = StreamFrame{} }
func (m *StreamFrame) String() string            { return proto.CompactTextString(m) }
func (*StreamFrame) ProtoMessage()               {}
func (*StreamFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StreamFrame) GetMeta() map[string][]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *StreamFrame) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamFrame)(nil), "protos.StreamFrame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamSupport service

type StreamSupportClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamSupport_StreamClient, error)
}

type streamSupportClient struct {
	cc *grpc.ClientConn
}

func NewStreamSupportClient(cc *grpc.ClientConn) StreamSupportClient {
	return &streamSupportClient{cc}
}

func (c *streamSupportClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamSupport_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamSupport_serviceDesc.Streams[0], c.cc, "/protos.StreamSupport/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSupportStreamClient{stream}
	return x, nil
}

type StreamSupport_StreamClient interface {
	Send(*StreamFrame) error
	Recv() (*StreamFrame, error)
	grpc.ClientStream
}

type streamSupportStreamClient struct {
	grpc.ClientStream
}

func (x *streamSupportStreamClient) Send(m *StreamFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamSupportStreamClient) Recv() (*StreamFrame, error) {
	m := new(StreamFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamSupport service

type StreamSupportServer interface {
	Stream(StreamSupport_StreamServer) error
}

func RegisterStreamSupportServer(s *grpc.Server, srv StreamSupportServer) {
	s.RegisterService(&_StreamSupport_serviceDesc, srv)
}

func _StreamSupport_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamSupportServer).Stream(&streamSupportStreamServer{stream})
}

type StreamSupport_StreamServer interface {
	Send(*StreamFrame) error
	Recv() (*StreamFrame, error)
	grpc.ServerStream
}

type streamSupportStreamServer struct {
	grpc.ServerStream
}

func (x *streamSupportStreamServer) Send(m *StreamFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamSupportStreamServer) Recv() (*StreamFrame, error) {
	m := new(StreamFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamSupport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.StreamSupport",
	HandlerType: (*StreamSupportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamSupport_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "baap_stream.proto",
}

func init() { proto.RegisterFile("baap_stream.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4a, 0x4c, 0x2c,
	0x88, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03,
	0x53, 0xc5, 0x4a, 0xbd, 0x8c, 0x5c, 0xdc, 0xc1, 0x60, 0x09, 0xb7, 0xa2, 0xc4, 0xdc, 0x54, 0x21,
	0x43, 0x2e, 0x96, 0xdc, 0xd4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x59, 0x88,
	0xea, 0x62, 0x3d, 0x24, 0x25, 0x7a, 0xbe, 0xa9, 0x25, 0x89, 0xae, 0x79, 0x25, 0x45, 0x95, 0x41,
	0x60, 0xa5, 0x42, 0x42, 0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c,
	0x41, 0x60, 0xb6, 0x94, 0x39, 0x17, 0x27, 0x5c, 0x99, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0xa5,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x53,
	0x9a, 0x0a, 0xd5, 0x03, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x1a, 0x79, 0x72, 0xf1, 0x42, 0xec, 0x0a,
	0x2e, 0x2d, 0x28, 0xc8, 0x2f, 0x2a, 0x11, 0xb2, 0xe0, 0x62, 0x83, 0x08, 0x08, 0x09, 0x63, 0x71,
	0x8c, 0x14, 0x36, 0x41, 0x25, 0x06, 0x0d, 0x46, 0x03, 0x46, 0x27, 0x0d, 0x2e, 0xa1, 0xa4, 0xcc,
	0x2a, 0xbd, 0x82, 0x94, 0x8a, 0x92, 0xd4, 0xe4, 0x0c, 0x3d, 0x88, 0xf7, 0xa3, 0x90, 0xc5, 0xf4,
	0x21, 0x62, 0x49, 0x90, 0xc0, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x73, 0x15, 0xa8, 0xe3,
	0x28, 0x01, 0x00, 0x00,
}
